/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Quote = {
  _type: 'quote'
  content?: string
  author?: string
}

export type UnfurledUrl = {
  _type: 'unfurledUrl'
  url?: string
}

export type Youtube = {
  _type: 'youtube'
  url?: string
}

export type Twitter = {
  _type: 'twitter'
  url?: string
}

export type PortableText = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      src?: string
      caption?: string
      maxWidth?: number
      alt?: string
      _type: 'imageWithMetadata'
      _key: string
    }
  | ({
      _key: string
    } & Code)
  | ({
      _key: string
    } & CodeSandbox)
  | ({
      _key: string
    } & CodePen)
  | ({
      _key: string
    } & Youtube)
  | ({
      _key: string
    } & Twitter)
  | ({
      _key: string
    } & Iframe)
  | ({
      _key: string
    } & InfoBlock)
  | ({
      _key: string
    } & UnfurledUrl)
  | ({
      _key: string
    } & Quote)
>

export type ImageWithMetadata = {
  _type: 'imageWithMetadata'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  src?: string
  caption?: string
  maxWidth?: number
  alt?: string
}

export type DescriptionText = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    href?: string
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type CodeSandbox = {
  _type: 'codeSandbox'
  url?: string
}

export type CodePen = {
  _type: 'codePen'
  url?: string
}

export type InfoBlock = {
  _type: 'infoBlock'
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Iframe = {
  _type: 'iframe'
  src?: string
  height?: number
}

export type SocialMediaLink = {
  _type: 'socialMediaLink'
  type?: 'email' | 'gitHub' | 'medium' | 'twitter' | 'website' | 'linkedIn' | 'instagram'
  url?: string
}

export type Tag = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: string
  synonyms?: Array<string>
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  fullName?: string
  slug?: Slug
  companyName?: string
  profilePicture?: string
  socialMediaLinks?: Array<
    {
      _key: string
    } & SocialMediaLink
  >
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type?: 'article' | 'video' | 'podcast'
  title?: string
  slug?: Slug
  embedUrl?: string
  podcastLength?: number
  description?: DescriptionText
  previewText?: string
  content?: PortableText
  coverImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    src?: string
    hideFromPost?: boolean
    _type: 'image'
  }
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'author'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  keywords?: Array<string>
  relatedLinks?: Array<{
    title?: string
    description?: string
    url?: string
    _type: 'relatedLink'
    _key: string
  }>
  canonicalUrl?: string
  language?: 'en-US' | 'nb-NO' | 'nn-NO'
  availableFrom?: string
  priority?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Code = {
  _type: 'code'
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Quote
  | UnfurledUrl
  | Youtube
  | Twitter
  | PortableText
  | ImageWithMetadata
  | DescriptionText
  | CodeSandbox
  | CodePen
  | InfoBlock
  | Iframe
  | SocialMediaLink
  | Tag
  | Author
  | Post
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Code
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../web/utils/sanity/queries/postQueries.ts
// Variable: ALL_POSTS
// Query: *[_type == "post"]
export type ALL_POSTSResult = Array<{
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type?: 'article' | 'podcast' | 'video'
  title?: string
  slug?: Slug
  embedUrl?: string
  podcastLength?: number
  description?: DescriptionText
  previewText?: string
  content?: PortableText
  coverImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    src?: string
    hideFromPost?: boolean
    _type: 'image'
  }
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'author'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  keywords?: Array<string>
  relatedLinks?: Array<{
    title?: string
    description?: string
    url?: string
    _type: 'relatedLink'
    _key: string
  }>
  canonicalUrl?: string
  language?: 'en-US' | 'nb-NO' | 'nn-NO'
  availableFrom?: string
  priority?: number
}>
// Variable: POST_PROJECTION
// Query: {     _id,  _type,  _createdAt,  _updatedAt,  _rev,  type,  language,  embedUrl,  podcastLength,  title,  slug,  canonicalUrl,  description,  previewText,  availableFrom,  keywords,  content[] {    ...,    _type == 'imageWithMetadata' => {      ...,      asset->{        _id,        url,        metadata {          dimensions {            aspectRatio,            width,            height          }        }      }    }  },  priority,    authors[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    fullName,    slug,    companyName,    profilePicture,    socialMediaLinks  },    coverImage {    asset->{      _id,      _type,      url,      metadata {        dimensions {          aspectRatio,          width,          height        }      }    },    hotspot,    crop,    src,    alt,    hideFromPost  },  tags[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    slug,    name,    synonyms  },  relatedLinks    }
export type POST_PROJECTIONResult = {
  _id: never
  _type: never
  _createdAt: never
  _updatedAt: never
  _rev: never
  type: never
  language: never
  embedUrl: never
  podcastLength: never
  title: never
  slug: never
  canonicalUrl: never
  description: never
  previewText: never
  availableFrom: never
  keywords: never
  content: never
  priority: never
  authors: never
  coverImage: never
  tags: never
  relatedLinks: never
}
// Variable: POST_BY_SLUG
// Query: *[_type == "post" && slug.current == $slug][0]{     _id,  _type,  _createdAt,  _updatedAt,  _rev,  type,  language,  embedUrl,  podcastLength,  title,  slug,  canonicalUrl,  description,  previewText,  availableFrom,  keywords,  content[] {    ...,    _type == 'imageWithMetadata' => {      ...,      asset->{        _id,        url,        metadata {          dimensions {            aspectRatio,            width,            height          }        }      }    }  },  priority,    authors[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    fullName,    slug,    companyName,    profilePicture,    socialMediaLinks  },    coverImage {    asset->{      _id,      _type,      url,      metadata {        dimensions {          aspectRatio,          width,          height        }      }    },    hotspot,    crop,    src,    alt,    hideFromPost  },  tags[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    slug,    name,    synonyms  },  relatedLinks    }
export type POST_BY_SLUGResult = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type: 'article' | 'podcast' | 'video' | null
  language: 'en-US' | 'nb-NO' | 'nn-NO' | null
  embedUrl: string | null
  podcastLength: number | null
  title: string | null
  slug: Slug | null
  canonicalUrl: string | null
  description: DescriptionText | null
  previewText: string | null
  availableFrom: string | null
  keywords: Array<string> | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'code'
        language?: string
        filename?: string
        code?: string
        highlightedLines?: Array<number>
      }
    | {
        _key: string
        _type: 'codePen'
        url?: string
      }
    | {
        _key: string
        _type: 'codeSandbox'
        url?: string
      }
    | {
        _key: string
        _type: 'iframe'
        src?: string
        height?: number
      }
    | {
        asset: {
          _id: string
          url: string | null
          metadata: {
            dimensions: {
              aspectRatio: number | null
              width: number | null
              height: number | null
            } | null
          } | null
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        src?: string
        caption?: string
        maxWidth?: number
        alt?: string
        _type: 'imageWithMetadata'
        _key: string
      }
    | {
        _key: string
        _type: 'infoBlock'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'quote'
        content?: string
        author?: string
      }
    | {
        _key: string
        _type: 'twitter'
        url?: string
      }
    | {
        _key: string
        _type: 'unfurledUrl'
        url?: string
      }
    | {
        _key: string
        _type: 'youtube'
        url?: string
      }
  > | null
  priority: number | null
  authors: Array<{
    _id: string
    _type: 'author'
    _createdAt: string
    _updatedAt: string
    _rev: string
    fullName: string | null
    slug: Slug | null
    companyName: string | null
    profilePicture: string | null
    socialMediaLinks: Array<
      {
        _key: string
      } & SocialMediaLink
    > | null
  }> | null
  coverImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      url: string | null
      metadata: {
        dimensions: {
          aspectRatio: number | null
          width: number | null
          height: number | null
        } | null
      } | null
    } | null
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
    src: string | null
    alt: string | null
    hideFromPost: boolean | null
  } | null
  tags: Array<{
    _id: string
    _type: 'tag'
    _createdAt: string
    _updatedAt: string
    _rev: string
    slug: string | null
    name: string | null
    synonyms: Array<string> | null
  }> | null
  relatedLinks: Array<{
    title?: string
    description?: string
    url?: string
    _type: 'relatedLink'
    _key: string
  }> | null
} | null
// Variable: ARTICLE_CONTENT_BY_ID
// Query: *[_type == "post" && type == "article" && _id == $id][0] { title, description, "content": pt::text(content)}
export type ARTICLE_CONTENT_BY_IDResult = {
  title: string | null
  description: DescriptionText | null
  content: string
} | null
// Variable: POSTS_BY_YEAR_AND_DATE
// Query: *[_type == "post" && availableFrom == $date]{     _id,  _type,  _createdAt,  _updatedAt,  _rev,  type,  language,  embedUrl,  podcastLength,  title,  slug,  canonicalUrl,  description,  previewText,  availableFrom,  keywords,  content[] {    ...,    _type == 'imageWithMetadata' => {      ...,      asset->{        _id,        url,        metadata {          dimensions {            aspectRatio,            width,            height          }        }      }    }  },  priority,    authors[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    fullName,    slug,    companyName,    profilePicture,    socialMediaLinks  },    coverImage {    asset->{      _id,      _type,      url,      metadata {        dimensions {          aspectRatio,          width,          height        }      }    },    hotspot,    crop,    src,    alt,    hideFromPost  },  tags[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    slug,    name,    synonyms  },  relatedLinks    }
export type POSTS_BY_YEAR_AND_DATEResult = Array<{
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type: 'article' | 'podcast' | 'video' | null
  language: 'en-US' | 'nb-NO' | 'nn-NO' | null
  embedUrl: string | null
  podcastLength: number | null
  title: string | null
  slug: Slug | null
  canonicalUrl: string | null
  description: DescriptionText | null
  previewText: string | null
  availableFrom: string | null
  keywords: Array<string> | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'code'
        language?: string
        filename?: string
        code?: string
        highlightedLines?: Array<number>
      }
    | {
        _key: string
        _type: 'codePen'
        url?: string
      }
    | {
        _key: string
        _type: 'codeSandbox'
        url?: string
      }
    | {
        _key: string
        _type: 'iframe'
        src?: string
        height?: number
      }
    | {
        asset: {
          _id: string
          url: string | null
          metadata: {
            dimensions: {
              aspectRatio: number | null
              width: number | null
              height: number | null
            } | null
          } | null
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        src?: string
        caption?: string
        maxWidth?: number
        alt?: string
        _type: 'imageWithMetadata'
        _key: string
      }
    | {
        _key: string
        _type: 'infoBlock'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'quote'
        content?: string
        author?: string
      }
    | {
        _key: string
        _type: 'twitter'
        url?: string
      }
    | {
        _key: string
        _type: 'unfurledUrl'
        url?: string
      }
    | {
        _key: string
        _type: 'youtube'
        url?: string
      }
  > | null
  priority: number | null
  authors: Array<{
    _id: string
    _type: 'author'
    _createdAt: string
    _updatedAt: string
    _rev: string
    fullName: string | null
    slug: Slug | null
    companyName: string | null
    profilePicture: string | null
    socialMediaLinks: Array<
      {
        _key: string
      } & SocialMediaLink
    > | null
  }> | null
  coverImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      url: string | null
      metadata: {
        dimensions: {
          aspectRatio: number | null
          width: number | null
          height: number | null
        } | null
      } | null
    } | null
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
    src: string | null
    alt: string | null
    hideFromPost: boolean | null
  } | null
  tags: Array<{
    _id: string
    _type: 'tag'
    _createdAt: string
    _updatedAt: string
    _rev: string
    slug: string | null
    name: string | null
    synonyms: Array<string> | null
  }> | null
  relatedLinks: Array<{
    title?: string
    description?: string
    url?: string
    _type: 'relatedLink'
    _key: string
  }> | null
}>
// Variable: ALL_CATEGORIES
// Query: *[_type == "tag"] | order(name asc)
export type ALL_CATEGORIESResult = Array<{
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: string
  synonyms?: Array<string>
}>
// Variable: TAG_BY_SLUG
// Query: *[_type == "tag" && slug == $slug][0]
export type TAG_BY_SLUGResult = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: string
  synonyms?: Array<string>
} | null
// Variable: POSTS_BY_TAGS
// Query: *[_type == "post" && $t in tags[]->.slug]{     _id,  _type,  _createdAt,  _updatedAt,  _rev,  type,  language,  embedUrl,  podcastLength,  title,  slug,  canonicalUrl,  description,  previewText,  availableFrom,  keywords,  content[] {    ...,    _type == 'imageWithMetadata' => {      ...,      asset->{        _id,        url,        metadata {          dimensions {            aspectRatio,            width,            height          }        }      }    }  },  priority,    authors[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    fullName,    slug,    companyName,    profilePicture,    socialMediaLinks  },    coverImage {    asset->{      _id,      _type,      url,      metadata {        dimensions {          aspectRatio,          width,          height        }      }    },    hotspot,    crop,    src,    alt,    hideFromPost  },  tags[]->{    _id,    _type,    _createdAt,    _updatedAt,    _rev,    slug,    name,    synonyms  },  relatedLinks    }
export type POSTS_BY_TAGSResult = Array<{
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type: 'article' | 'podcast' | 'video' | null
  language: 'en-US' | 'nb-NO' | 'nn-NO' | null
  embedUrl: string | null
  podcastLength: number | null
  title: string | null
  slug: Slug | null
  canonicalUrl: string | null
  description: DescriptionText | null
  previewText: string | null
  availableFrom: string | null
  keywords: Array<string> | null
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'code'
        language?: string
        filename?: string
        code?: string
        highlightedLines?: Array<number>
      }
    | {
        _key: string
        _type: 'codePen'
        url?: string
      }
    | {
        _key: string
        _type: 'codeSandbox'
        url?: string
      }
    | {
        _key: string
        _type: 'iframe'
        src?: string
        height?: number
      }
    | {
        asset: {
          _id: string
          url: string | null
          metadata: {
            dimensions: {
              aspectRatio: number | null
              width: number | null
              height: number | null
            } | null
          } | null
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        src?: string
        caption?: string
        maxWidth?: number
        alt?: string
        _type: 'imageWithMetadata'
        _key: string
      }
    | {
        _key: string
        _type: 'infoBlock'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'quote'
        content?: string
        author?: string
      }
    | {
        _key: string
        _type: 'twitter'
        url?: string
      }
    | {
        _key: string
        _type: 'unfurledUrl'
        url?: string
      }
    | {
        _key: string
        _type: 'youtube'
        url?: string
      }
  > | null
  priority: number | null
  authors: Array<{
    _id: string
    _type: 'author'
    _createdAt: string
    _updatedAt: string
    _rev: string
    fullName: string | null
    slug: Slug | null
    companyName: string | null
    profilePicture: string | null
    socialMediaLinks: Array<
      {
        _key: string
      } & SocialMediaLink
    > | null
  }> | null
  coverImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      url: string | null
      metadata: {
        dimensions: {
          aspectRatio: number | null
          width: number | null
          height: number | null
        } | null
      } | null
    } | null
    hotspot: SanityImageHotspot | null
    crop: SanityImageCrop | null
    src: string | null
    alt: string | null
    hideFromPost: boolean | null
  } | null
  tags: Array<{
    _id: string
    _type: 'tag'
    _createdAt: string
    _updatedAt: string
    _rev: string
    slug: string | null
    name: string | null
    synonyms: Array<string> | null
  }> | null
  relatedLinks: Array<{
    title?: string
    description?: string
    url?: string
    _type: 'relatedLink'
    _key: string
  }> | null
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "post"]': ALL_POSTSResult
    "{\n     _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  type,\n  language,\n  embedUrl,\n  podcastLength,\n  title,\n  slug,\n  canonicalUrl,\n  description,\n  previewText,\n  availableFrom,\n  keywords,\n  content[] {\n    ...,\n    _type == 'imageWithMetadata' => {\n      ...,\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            aspectRatio,\n            width,\n            height\n          }\n        }\n      }\n    }\n  },\n  priority,\n  \n  authors[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    fullName,\n    slug,\n    companyName,\n    profilePicture,\n    socialMediaLinks\n  },\n  \n  coverImage {\n    asset->{\n      _id,\n      _type,\n      url,\n      metadata {\n        dimensions {\n          aspectRatio,\n          width,\n          height\n        }\n      }\n    },\n    hotspot,\n    crop,\n    src,\n    alt,\n    hideFromPost\n  },\n\n  tags[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    slug,\n    name,\n    synonyms\n  },\n  relatedLinks\n    }": POST_PROJECTIONResult
    '*[_type == "post" && slug.current == $slug][0]{\n     _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  type,\n  language,\n  embedUrl,\n  podcastLength,\n  title,\n  slug,\n  canonicalUrl,\n  description,\n  previewText,\n  availableFrom,\n  keywords,\n  content[] {\n    ...,\n    _type == \'imageWithMetadata\' => {\n      ...,\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            aspectRatio,\n            width,\n            height\n          }\n        }\n      }\n    }\n  },\n  priority,\n  \n  authors[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    fullName,\n    slug,\n    companyName,\n    profilePicture,\n    socialMediaLinks\n  },\n  \n  coverImage {\n    asset->{\n      _id,\n      _type,\n      url,\n      metadata {\n        dimensions {\n          aspectRatio,\n          width,\n          height\n        }\n      }\n    },\n    hotspot,\n    crop,\n    src,\n    alt,\n    hideFromPost\n  },\n\n  tags[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    slug,\n    name,\n    synonyms\n  },\n  relatedLinks\n    }': POST_BY_SLUGResult
    '*[_type == "post" && type == "article" && _id == $id][0] { title, description, "content": pt::text(content)}': ARTICLE_CONTENT_BY_IDResult
    '*[_type == "post" && availableFrom == $date]{\n     _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  type,\n  language,\n  embedUrl,\n  podcastLength,\n  title,\n  slug,\n  canonicalUrl,\n  description,\n  previewText,\n  availableFrom,\n  keywords,\n  content[] {\n    ...,\n    _type == \'imageWithMetadata\' => {\n      ...,\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            aspectRatio,\n            width,\n            height\n          }\n        }\n      }\n    }\n  },\n  priority,\n  \n  authors[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    fullName,\n    slug,\n    companyName,\n    profilePicture,\n    socialMediaLinks\n  },\n  \n  coverImage {\n    asset->{\n      _id,\n      _type,\n      url,\n      metadata {\n        dimensions {\n          aspectRatio,\n          width,\n          height\n        }\n      }\n    },\n    hotspot,\n    crop,\n    src,\n    alt,\n    hideFromPost\n  },\n\n  tags[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    slug,\n    name,\n    synonyms\n  },\n  relatedLinks\n    }': POSTS_BY_YEAR_AND_DATEResult
    '*[_type == "tag"] | order(name asc)': ALL_CATEGORIESResult
    '*[_type == "tag" && slug == $slug][0]': TAG_BY_SLUGResult
    '*[_type == "post" && $t in tags[]->.slug]{\n     _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  type,\n  language,\n  embedUrl,\n  podcastLength,\n  title,\n  slug,\n  canonicalUrl,\n  description,\n  previewText,\n  availableFrom,\n  keywords,\n  content[] {\n    ...,\n    _type == \'imageWithMetadata\' => {\n      ...,\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            aspectRatio,\n            width,\n            height\n          }\n        }\n      }\n    }\n  },\n  priority,\n  \n  authors[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    fullName,\n    slug,\n    companyName,\n    profilePicture,\n    socialMediaLinks\n  },\n  \n  coverImage {\n    asset->{\n      _id,\n      _type,\n      url,\n      metadata {\n        dimensions {\n          aspectRatio,\n          width,\n          height\n        }\n      }\n    },\n    hotspot,\n    crop,\n    src,\n    alt,\n    hideFromPost\n  },\n\n  tags[]->{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    slug,\n    name,\n    synonyms\n  },\n  relatedLinks\n    }': POSTS_BY_TAGSResult
  }
}
